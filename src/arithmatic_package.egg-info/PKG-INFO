Metadata-Version: 2.1
Name: arithmatic_package
Version: 0.0.1
Summary: A sample python packaging and automating testing project
License: MIT License
        
        Copyright (c) 2024 Indiwara65
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: project, https://github.com/Indiwara65/python_packaging.git
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: flake8; extra == "dev"

# Python Packaging    
## Why
#### Metadata      
* Metadata can be easily logged by packaging the project.   

#### Internal Dependencies      
* If there are any modules that are imported to the main code it might case errors.      
* This due to the fact that python maintains a list of file paths for all the libraries installed. If a internal module is imported python might raise an error 'no module error'.        
* Thses errors will be eliminated by packaging the project.     

#### External Dependencies     
* External dependecies can be easily be installed at the same time the package in installed.       

#### Automation     
* Automating testing will require to import the files which will be problematic if the files arn't packaged.

#### Standardization       
* Python package is will standardized by PEP. (Python Enhancement Proposal) 
* Therefore, a package developed in one device is garanteed to work in another.
### Folder Structure / Source Tree
mypackage/           
├── __init__.py            
├── __main__.py          
├──  module1.py      
└──  module2.py             
* __main__.py will be the entry point when the folder is called __main__.py will be the file that is executed.       
* __init__.py is used by convention to mark the directory as a 

### pyproject.toml
* The pyproject.toml file is written in TOML. Three tables are currently specified, namely **[build-system]**, **[project]** and **[tool]**. Other tables are reserved for future use.         
* Referance - https://packaging.python.org/en/latest/specifications/pyproject-toml/                  
* **source distribution** (s-dist) - contains raw source code and metadata, used for building the project on the target system.         
* **wheel** - a pre-built binary distribution that can be installed quickly without the need for building from source.
* **build-backend** - the tool or library responsible for building the project, specified in the pyproject.toml file.               
#### [build-system]      
* fileds - 
    * requires - required libraries for building the source distribution.                   
    * build-backend - tool used for building the source distribution        

#### [project]           
* **project** this table is used to declare metadata.       
* There are 2 types of metadata -             
    * static - static variables are hard coded in either pyproject.toml, setup.py or setup.cfg file. eg - name, author name, license etc...                   
    * dynamic - dynamic metadata are allocated during the build time.     

* mandotary fileds -             
    * name, version        
* other fileds - 
    * authors, urls, license, description, readme 
              

# Testing            
## Unit Testing   
* Unit testing is focusses a part of a code at a time usually a function or a class at a time.        
* Python has a inbuilt package **unittest** to perform and **pytest** is also a popular package.      

